/****************************************************************
******** Language : C *******************************************
************** OS : Windows ************************************
*********************** IDE : Dev C++  and  VScode **************
********************************** Let's start! ********************
******************************************************************/


// # 7.  1차원 배열과 로또 번호 생성 프로그램
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main()
{
	int i,j;
	int num[6];
	srand((unsigned int)time(NULL));
	
	printf("로또 번호 생성 프로그램입니다.\n");
	
	for (i=1; i<=6; i++)
	{
		num[i] = rand()%45+1;
		for (j=1; j<i; j++)
		{
			if (num[i]==num[j])  // 중복 난수가 발생하는 것을 막기 위함
			{
				i--;
			}
		}
	}
	
	
	printf("로또 번호입니다. \n");
	
	for (i=1; i<=6; i++)
	{
		printf("%d ",num[i]);
	}
	return 0;
}

-------------------------------------------------------------------------------------

- 처음보는게 있습니다. [ ] 이건 뭔가요?
§ 배열을 뜻합니다. 배열은 변수들이 살고 있는 '아파트' 같은거라 생각하시면 됩니다. 변수가 조금밖에 없다면 큰 상관은 없습니다. 그저 조금의 노동력이 필요할 뿐인데요.
만약 변수가 수백개, 수천개는 된다면? 그걸 일일이 선언하는데 하루를 날리게 될 것입니다. 

int a = 1;
int b = 10;
int c = 15;
int d = 22;
.
.
.
4개만 쳤는데도 벌써부터 귀찮습니다. 다행히도 C언어에서는 이러한 귀찮음을 해결해줄 함수가 있습니다. 바로 배열. array 함수입니다.
위에 적은 소스코드를 보면  	int num[6];  라는게 보입니다. 이 의미는  num이라는 array 함수에 6개의 정수를 저장받겠다라는 말입니다.

-------------------------------------------------------------------------------------

- 배열과 메모리 주소
§ 근데 제가 위에서 배열을 변수들의 아파트다! 라고 했는데요. 그럼 각각 변수가 갖는 주소도 다르지 않을까? 라고 생각을 할 수 있습니다.
같은 아파트에 있다하더라도 101호인지 102호인지 103호인지. 주소가 다 다르니까요. 배열도 똑같습니다.
위의 소스코드에서 

for (i=1; i<=6; i++)
	{
		printf("%d -> %p\n",num[i],&num[i]);
		
	}
  이렇게 %p라는 형식지정자를 선언해보겠습니다. %p는 메모리가 할당된 주소값을 의미합니다.
  근데 앞에서 제 글을 보신분들 중에 기억력이 좋으신분들은  '주소값을 부르는 형식지정자니까 &num[i]' 라 하였군. 라고 생각하셨을겁니다.
  물론 생각 못해내셨어도 괜찮습니다.  사람은 망각의 동물이니까요.
  
41 -> 000000000062FE04
23 -> 000000000062FE08
12 -> 000000000062FE0C
37 -> 000000000062FE10
22 -> 000000000062FE14
6 -> 000000000062FE18

제가 한번 돌려보니 나온 주소들입니다. 어떤가요? 각 변수들이 가지는 주소값들이 모두 다릅니다. 그리고 신기한게 한가지 보입니다.
주소의 끝을 보니까 중간에 C를 제외하고는 4씩 증가하는 모습을 보입니다.  추측을 해볼까요?

저희가 지정한 num[i]의 자료형은 int입니다. 근데 int 자료형은 메모리 크기가 4Byte지 않았나요? 그래서  4Byte씩 증가하는게 아닐까? 라는 생각이 듭니다.
맞습니다. 이렇게 생각했다면 정말 C언어에 감각이 뛰어나신겁니다.

지금은 더 이상 나가기엔 무리이므로 여기까지만 하겠습니다. 다만 지금 보는 이 개념은 곧 나올 포인터 개념에 있어서 굉장한 도움이 될테니 다시 한번 읽어보는 것을 추천합니다.
