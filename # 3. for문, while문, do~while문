/****************************************************************
******** Language : C *******************************************
************** OS : Windows *************************************
*********************** IDE : Dev C++  and  VScode **************
********************************** Let's start! ******************
******************************************************************/


// # 3.  for문, while문, do~while문


오늘 쓰는 for , while , do ~while은 모두 반복문의 종류들이다.
예를 들어서, 신입사원인 여러분들이 오늘 첫 출근을 했다하자. 팀원분들께 인사를 드리러 가야하는데
SW엔지니어인만큼 C언어를 통해서 각각 인사를 드리라는 첫 미션을 받았다.
팀원은 무려 50명이나 된다. 그러면 50번의 printf를 통해 안녕하세요!를 전달하기로 하자.

printf("안녕하세요!\n");
printf("안녕하세요!\n");
printf("안녕하세요!\n");
printf("안녕하세요!\n");
printf("안녕하세요!\n");
.
.
.
.
printf("안녕하세요!\n");

그리고 이 신입사원은 첫 출근이 마지막 출근이 되었다고 한다.
왜일까? 그야 SW엔지니어라면 절대 하지않을 짓을 했기 때문에 밑천이 드러난게 아닐까 싶다.

우리들에게 날아올 해고를 막기 위해 첫번째로 for문부터 살펴보도록 하자.

/********** for문 ***********/

#include <stdio.h>

int main()
{
	int num1;
	
	for (num1 = 2; num1<=9; num1++)
	{
		printf("[%d] number appeared!\n",num1);
	}
	
	return 0;
}

for문의 간단한 예시이다. 보면 저번에 작성했던 if문과 다르게 괄호 안에 뭐가 참 많다. 하나씩 살펴보자

- for ( ??; ??; ??)의 의미.
§ 첫번째 ??는 초기값 선언을 의미한다. 즉, 반복을 시작하기 전에 어디서부터 시작하면 된다! 를 알려준다.
Start Line을 끊어주는 셈이다.

--------------------------------------------------------------------------------------------
§ 두번째 ??는 조건식을 의미한다. 위의 소스코드를 보면 num1이라는 변수의 초기값은 2로 선언이 되었다.
그러면 2부터 시작해서 반복을 진행한다는 건데 그 반복의 끝이 언제까지냐~ 를 정해주는 것이다.
num1이 9가 되면 for문을 종료한다. 라고 보면 된다.

--------------------------------------------------------------------------------------------
§ 세번째 ??는 증감식을 의미한다. 여기서 처음보는 연산자가 또 등장했다. 이전에 미처 설명하지 못했는데
++는 '1씩 증가하는 연산자'라는 의미이다. 세번째 ??를 풀어쓰자면 다음과 같다.
num1 = num1 + 1; 이걸 의미한다. 즉, 우변에 있는 애를 좌변의 num1 상자에 집어넣는다는 건데 이걸 반복하면
결국 num1 상자는 1씩 증가하는 것이다. 이걸 간단히 줄여쓴게 num1++ 이다.

그럼 당연히 1씩 감소하는 연산자라는 것도 있다. 그리고 그건 당연하게도 -- 로 표시한다.

for문을 사용할 때는 위 3가지 식들을 반드시 정의해줘야 한다.



/********** while문 ***********/
#include <stdio.h>

int main()
{
	int num1=2;
	
	while(num1<=9)
	{
		printf("%d\n",num1);
		num1++;
	}
	
	return 0;
}


이번에는 while문이다. for문이랑 기능은 같은데 틀이 조금 달라보인다. 하나씩 살펴보자.
- while의 구조
§ 첫번째로 초기화 식은 while문의 위에 선언한다.
왜? 그냥 while문을 쓸 때의 약속이다.

--------------------------------------------------------------------------------------------
§ 두번째로 조건식은 while ( 조건식 쓰세요 )에다 선언한다.

--------------------------------------------------------------------------------------------
§ 세번째로 증감식은 while의 몸체에다 선언한다.



/********** do while문 ***********/
#include <stdio.h>

int main()
{
	int num1=2;
	do
	{
		printf("%d\n",num1);
		num1++;
	}
	
	while(num1<=1);
	
	return 0;
}

- do while문 코드 올바르게 쓴게 맞나요? 조건식이랑 초기값이 뭔가 미스매칭인데...?
§ do while문과 while문은 서로 비교해가면서 설명하고자 한다.
일단 while문이 do while문과 다른 특징은 조건을 먼저보고 조건이 맞으면 실행을 한다는 것이다.
따라서 while문이 만약 do while문의 코드를 수행한다하면 출력화면에 아무것도 뜨지 않는다.

근데 do while문은 다르다. do에 나온 코드를 '일단 처음 한번은 무조건 실행을 해본다'
좀 더 자세히 말하자면 do에 나온 코드를 먼저 실행을 해본다음에 아래 while문의 조건식에 맞는지 확인해본다.
만약 while문의 조건과 맞지않는다면 더 이상 반복이 진행되지 않는다. 오직 처음에 실행했던 코드 빼고!

그래서 do while문의 코드를 돌려보면 숫자 2 하나는 출력된다.
