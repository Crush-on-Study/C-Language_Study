/****************************************************************
******** Language : C *******************************************
************** OS : Windows ************************************
*********************** IDE : Dev C++  and  VScode **************
********************************** Let's start! ********************
******************************************************************/



// # 8. 2차원 배열

#include <stdio.h>

int main()
{
	int arr[3][4] = 
	{
		1,2,3,4,
		5,6,7,8,
		9,10,11,12
	};
	
	
	printf("%d",arr[1][2]);	
	
	return 0;
}

--------------------------------------------------------------------------------------------------------

- 2차원 배열 기초 개념
§ arr[i][j]에서 i는 행을 j는 열을 의미합니다.
위에 코드를 구성한 것을 보면 제가 이해를 돕기 위해

1,2,3,4,
5,6,7,8,
9,10,11,12

라고 해놨습니다. 행과 열을 헷갈리시는 분들이 많은데
열은 말 그대로 변수를 저장한 배열을 의미합니다.
그리고 행은 '몇 개'의 배열을 저장할 것이냐? 라는 의미입니다.

따라서 위의 소스코드는 하나의 배열에 4개의 변수가 저장 되어있구요.
그 배열이 총 3개다! 라고 보시면 됩니다. 이게 arr[3][4]의 의미입니다.

--------------------------------------------------------------------------------------------------------
- 위 소스코드에서 arr[1][2]의 예상 출력값은?
§ 코드를 직접 돌리기 전에 한번 생각해봅시다. 힌트를 드리자면 배열의 인덱스가 몇번부터 시작하는 것인지 유념하셔야 합니다.



답은 7입니다. 앞에서 arr[3][4]의 의미는 행과 열의 개수를 의미할 뿐 1,2,3 / 1,2,3,4를 의미하는 것이 아닙니다.
배열의 인덱스는 항상 0부터 시작하기 때문에 arr[1][2]는 
'2번째 행 + 3번째 열'에 해당하는 숫자를 의미합니다. 그래서 7이 나오는 것입니다.



#include <stdio.h>
#include <stdlib.h>

int main()
{
	int i,j;
	char arr[50][50] =
	{
		"□       ■   □",
		"□  ■        □",
		"□      ■    □",
		"□            □",
		"□            □",
		"□        ■  □",
		"□            □",
		"□  ■        □",
		"□         ■ □",
		"□    ■      □",
		"□            □",
		"□▣▣▣▣▣▣□",
		"□▣▣▣▣▣▣□"
		
	};
	
	for (i=0; i<15; i++)
	{
		printf("%s",arr[i]);
				printf("\n");
	}
	
	
	return 0;
}

--------------------------------------------------------------------------------------------------------
Q. Think more! 위 소스코드에서는 2차원 배열로 문자를 받았지만,
출력할 때는 1차원 배열로 출력했습니다. 
이게 가능한가요?

A. 가능하죠. '행'만 출력해도 우리가 원하는 결과물을 얻는데 문제가 없어보이니까요.
    1. "□        ■   □",
		2. "□  ■         □",
		3. "□       ■    □",
		4. "□            □",
		5. "□            □",
		6. "□         ■  □",
		7. "□            □",
		8. "□  ■         □",
		9. "□          ■ □",
		10."□    ■       □",
		11."□            □",
		12."□▣▣▣▣▣▣□",
		13."□▣▣▣▣▣▣□"
    
13개의 행만 출력하라해도 문제없이 출력이 됩니다. 
